\/\/\/\/__BLURRED DETECTION___\/\/\/\/
The first thing I did was google 'python detect if image blurry'
This came up with OpenCV, first result <https://www.pyimagesearch.com/2015/09/07/blur-detection-with-opencv/>
This tutorial looks like it wil be very helpful in completing this assignment
The tutorial links to a paper on 'Analysis of focus measure operators for shape-from-focus' (DOI 10.1016/j.patcog.2012.11.011)
	- The paper is beyond me but seems a good thing to bookmark/ask about in future
Tutorial uses this paper to conclude that taking the variance of the laplacian returns a value that can be used to determine blurryness
	- Laplacian: [0  1  0;
		      1 -4  1;
		      0  1  0]
	- Laplacian calculates 2nd derivative -> highlights regions containing rapid intensity changes
High variance -> sharper, low variance -> blurrier
Use grayscale to calculate (one channel)
Installed opencv3

Tried to run the code from the tutorial with minimal reading into it and no changes, this failed (unsurprisingly). [1stAttempt.py]
Next I decided to re-familiarise myself with python I/O, string concatenation and openCV, so I made a practice program to read in a name and use openCV to open the image [openCVpractice.py]

With a bit of tinkering and taking code from the aforementioned scripts, I was able to write code to take in an image correctly (per Suchet's email's specification) and return the value of the variance of the laplacian. All that is left to do is decide what the threshold is at which the image is considered blurry or not. 

For this I modified the tutorial code [detect_blur.py] so that I could take in the folder name and loop through all of the images adding each variance to an array, and at the end displaying:
	- The entire array
	- The highest and lowest variations of all the photos. 
	- The standard deviation of the variances
	- The mean of the variances
I decided a 95% confidence interval was sufficient, and knowing the mean and standard deviation, I set the threshold for non blurriness at 155.76 (see 'tcb.png' in the git repo)
I also applied the same calculation in reverse, but the standard deviation of the good data was very high (see 'tcg.png'), leaving its lower bound of the 95% confidence interval at 5.36 (calculated by hand due to laziness), so the above value of 155.76 was used, as it is still far below the mean of the good data set.

To confirm the accuracy, I modified the code to count how many values were above and below the threshold to see how many images the code would have incorrectly identified in each folder. The results were:
Blurry data: 92% failed
	     8% passed
Good data:   20% failed
	     80% passed


Now the final code could be completed knowing this threshold, which is called 'detector.py' in compliance with the instructions